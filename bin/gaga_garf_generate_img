#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import gaga
import garf
import gatetools.phsp as phsp
import gatetools as gt
import torch
import os
import numpy as np
# import cupy as np
from torch.autograd import Variable
from matplotlib import pyplot as plt
import SimpleITK as sitk
import time
from tqdm import tqdm
import logging
logger=logging.getLogger(__name__)

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('gan_pth_filename')
@click.argument('garf_pth_filename')
@click.option('--n', '-n', default=1e5, help='Number of samples to generate')
@click.option('--output', '-o', required=True, help='Output filename.mhd ')
@click.option('--scale', '-s',
              default=float(1),
              help='Scale the final image by s. Useful to provide ratio emitted/detected')
@click.option('--debug', '-d', default=False, is_flag=True, 
              help='Debug: dump txt files with histogram of events hitting the detector plane')
@gt.add_options(gt.common_options)
def gaga_garf_generate_img(gan_pth_filename, garf_pth_filename, n, scale, output, debug, **kwargs):
    '''
    \b
    FIXME

    \b
    <GAN_PTH_FILENAME>    : input GAN-PHSP PTH file (.pth)
    <GARF_PTH_FILENAME>   : input GARF PTH file (.pth)
    '''

    # logger
    gt.logging_conf(**kwargs)

    # input number of events
    n = int(n)

    # load gan pth
    logger.info(f'Reading GAN-PHSP from {gan_pth_filename}')
    gan_params, G, D, optim, dtypef= gaga.load(gan_pth_filename)

    # load garf pth
    logger.info(f'Reading GARF from {gan_pth_filename}')
    garf_nn, garf_model = garf.load_nn(garf_pth_filename, verbose=False)

    # -------------------------------------  ONE SINGLE PLANE FOR THE MOMENT

    # initialisation
    batch_size = 1e6
    t0 = time.time()

    # initialisation plane
    radius = 180
    image_plane_size_mm = [576, 446]
    plane = gaga.init_plane(batch_size, radius=radius)

    # initialisation garf
    garf_param = {}
    garf_param['gpu_batch_size'] = int(1e5) # float(gpu_batch_size))
    garf_param['size'] = 128
    garf_param['spacing'] = 4.41806
    garf_param['length'] = 99
    garf_param['N_scale'] = scale # 0.6890382     # ratio emitted/detected
    garf_param['N_dataset'] = n
    size_mm = garf_param['size']*garf_param['spacing']/2.0

    # generate samples
    gan_batch_size = 1e5
    ev = 0
    images = []
    pbar = tqdm(total=n)
    while ev<n:

        # Step 1 : GAN
        t1 = time.time()
        logger.info(f'Generating {batch_size} events')
        x = gaga.generate_samples2(gan_params, G, batch_size, gan_batch_size, normalize=False, to_numpy=True)
        logger.info('Computation time: {0:.3f} sec'.format(time.time()-t1))

        # Step 2 : Projection
        t1 = time.time()
        px = gaga.project_on_plane(x, plane, image_plane_size_mm=image_plane_size_mm, debug=debug)
        logger.info('Computation time: {0:.3f} sec'.format(time.time()-t1))

        # (debug)
        # gaga.fig_plot_projected(px)

        # Step3 : GARF
        t1 = time.time()
        logger.info(f'Building image with {len(px)} particles')
        img, sq_img = garf.build_arf_image_with_nn(garf_nn, garf_model, px,
                                                   garf_param, verbose=False, debug=debug)
        images.append(img)
        logger.info('Computation time: {0:.3f} sec'.format(time.time()-t1))

        ev += batch_size
        pbar.update(batch_size)
        ev = min(ev,n)
        logger.info('')

    pbar.close()

    # sum images
    im_iter = iter(images)
    im = next(im_iter)
    data = sitk.GetArrayFromImage(im)
    for im in im_iter:
        d = sitk.GetArrayViewFromImage(im)
        data += d

    img = sitk.GetImageFromArray(data)
    img.CopyInformation(images[0])

    # dump final results
    print('Computation time: {0:.3f} sec'.format(time.time()-t0))
    sitk.WriteImage(img, output)



# --------------------------------------------------------------------------
if __name__ == '__main__':
    gaga_garf_generate_img()
