#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import json
import time
import socket
import gatetools.phsp as phsp
import gaga
import copy
import numpy as np
import colorama
from colorama import Fore, Style
import torch
import datetime

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('phsp_filename',
                type=click.Path(exists=True, file_okay=True, dir_okay=False))
@click.argument('json_filename',
                type=click.Path(exists=True, file_okay=True, dir_okay=False))
@click.argument('output_filename')
@click.option('--epoch', '-e',
              help='Number of epoch (overwrite the epoch value of the json file)',
              type=int,
              default=None)
@click.option('--progress-bar/--no-progress-bar', default=True)
@click.option('--start-pth', default=None,
              help='Start from already computed G and D, read in the given file')
def gaga_train(phsp_filename,
               json_filename,
               output_filename,
               epoch,
               progress_bar,
               start_pth):
    '''
    \b
    Train GAN to learn a PHSP (Phase Space File)

    \b
    <PHSP_FILENAME>   : input PHSP file (.npy)
    <JSON_FILENAME>   : input json file with all GAN parameters
    <OUTPUT_FILENAME> : output GAN as pth file
    '''

    # term color
    colorama.init()

    # read parameters
    param_file = open(json_filename).read()
    params = json.loads(param_file)

    # add params from the command line    
    params['progress_bar'] = progress_bar
    params['params_filename'] = json_filename
    params['training_filename'] = phsp_filename
    start = datetime.datetime.now()
    params['start date'] = start.strftime(gaga.date_format)
    params['hostname'] = socket.gethostname()
    params['start_pth'] = start_pth
    if epoch:
        params['epoch'] = epoch

    # read input training dataset
    print(Fore.CYAN +"Loading training dataset ... "+phsp_filename+Style.RESET_ALL)
    x, read_keys, m = phsp.load(phsp_filename)

    # consider only some keys
    keys, x = gaga.select_keys(x, params, read_keys)
    
    # add information
    params['training_size'] = len(x)
    params['keys'] = keys
    params['x_dim'] = len(keys)

    # print parameters
    for e in params:
        if (e[0] != '#'):
            print('   {:22s} {}'.format(e, str(params[e])))


    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    params['validation_filename'] = None
    params['plot'] = None
    params['validation_every_epoch'] = 0
    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # COMPATIBILITY FIXME TO REMOVE ##"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # build the model
    print(Fore.CYAN +'Building the GAN model ...'+Style.RESET_ALL)
    gan = gaga.Gan(params)

    # train
    print(Fore.CYAN +'Start training ...'+Style.RESET_ALL)
    optim = gan.train(x)

    # stop timer
    stop = datetime.datetime.now()
    params['end date'] = stop.strftime(gaga.date_format)

    # save output
    gan.save(optim, output_filename)

# --------------------------------------------------------------------------
if __name__ == '__main__':
    gaga_train()
