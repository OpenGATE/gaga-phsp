#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime
import json
import socket
import click
import colorama
import gatetools.phsp as phsp
from colorama import Fore, Style
import gaga
from box import Box

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('phsp_filename',
                type=click.Path(exists=True, file_okay=True, dir_okay=False))
@click.argument('json_filename',
                type=click.Path(exists=True, file_okay=True, dir_okay=False))
@click.option('--output', '-o', help='Output filename, default = automatic name', default='auto')
@click.option('--output_folder', '-f', help='Output folder (for auto output)', default='.')
@click.option('--progress-bar/--no-progress-bar', default=True)
@click.option('--user_param', '-p', help='overwrite parameter of the json file', multiple=True)
def gaga_train(phsp_filename, json_filename,
               output, output_folder,
               progress_bar, user_param):
    """
    \b
    Train GAN to learn a PHSP (Phase Space File)

    \b
    <PHSP_FILENAME>   : input PHSP file (.npy)
    <JSON_FILENAME>   : input json file with all GAN parameters
    """

    # term color
    colorama.init()

    # read parameters
    param_file = open(json_filename).read()
    params = Box(json.loads(param_file))
    print(params.loss_type)
    print(params)

    # overwrite params from the command line
    gaga.update_params(params, user_param)

    # read input training dataset
    print(Fore.CYAN + "Loading training dataset ... " + phsp_filename + Style.RESET_ALL)
    x, read_keys, m = phsp.load(phsp_filename)

    # consider only some keys
    params['keys_str'] = params['keys']
    keys, x = gaga.select_keys(x, params, read_keys)

    # add information
    params['training_size'] = len(x)
    params['keys'] = keys
    params['x_dim'] = len(keys)

    # print parameters
    for e in params:
        if (e[0] != '#'):
            print('   {:22s} {}'.format(e, str(params[e])))

    # build the model
    print(Fore.CYAN + 'Building the GAN model ...' + Style.RESET_ALL)
    gan = gaga.Gan(params)

    # train
    print(Fore.CYAN + 'Start training ...' + Style.RESET_ALL)
    optim = gan.train(x)

    # stop timer
    stop = datetime.datetime.now()
    params['end date'] = stop.strftime(gaga.date_format)

    # save output
    gan.save(optim, output_filename)

    print('done')


# --------------------------------------------------------------------------
if __name__ == '__main__':
    gaga_train()
