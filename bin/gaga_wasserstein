#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import gaga
import phsp
from torch.autograd import Variable
import torch
import numpy as np

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('phsp_filename')
@click.argument('pth_filename')
@click.option('--n', '-n', default=1e4, help='Number of samples to generate')
@click.option('--l', '-l', default=1e2, help='Number of projections')
@click.option('--p', '-p', default=1, help='Wasserstein distance power p=1 default')
@click.option('--keys', '-k', help='Plot the given keys (as a str list such that "X Y Z")', default='')
@click.option('--toggle/--no-toggle', default=False, help='Convert XY to angle')
@click.option('--radius', default=350, help='When convert angle, need the radius (in mm)')
@click.option('--normalize/--no-normalize', default=True,
              help='Normalize dimensions')
def gaga_wasserstein(phsp_filename, pth_filename, n, l, p, keys, toggle, radius, normalize):
    '''
    \b
    Compute sliced Wasserstein between real and GAN generated distributions

    \b
    <PHSP_FILENAME>   : input phase space file PHSP file (.npy)
    <PTH_FILENAME>    : input GAN PTH file (.pth)
    '''

    n = int(n)
    
    # load phsp
    real, r_keys, m = phsp.load(phsp_filename, n)

    # user keys
    keys = phsp.str_keys_to_array_keys(keys)
    
    # load pth
    params, G, optim, dtypef = gaga.load(pth_filename)
    f_keys = params['keys']
    if len(keys) == 0:
        keys = f_keys
            
    # generate samples (do NOT normalize yet)
    fake = gaga.generate_samples2(params, G, n, 1e5, False, True)
    
    # Keep X,Y or convert to toggle
    if toggle:
        keys = phsp.keys_toggle_angle(keys)

    real, r_keys = phsp.add_missing_angle(real, r_keys, keys, radius)
    fake, f_keys = phsp.add_missing_angle(fake, f_keys, keys, radius)
    real = phsp.select_keys(real, r_keys, keys)
    fake = phsp.select_keys(fake, f_keys, keys)

    print('real', real.shape, keys)
    print('fake', fake.shape, keys)    

    # normalize for computing the wasserstein
    if normalize:
        x_mean = params['x_mean']
        x_std = params['x_std']
        f_keys = params['keys']
        x_mean, z = phsp.add_missing_angle(x_mean, f_keys, keys, radius)
        x_std, z = phsp.add_missing_angle(x_std, f_keys, keys, radius)
        real = (real-x_mean)/x_std
        fake = (fake-x_mean)/x_std
 
    print('fake m',
          np.amin(fake, axis=0), np.amax(fake, axis=0),
          np.mean(fake, axis=0), np.std(fake, axis=0))

    print('real m',
          np.amin(real, axis=0), np.amax(real, axis=0),
          np.mean(real, axis=0), np.std(real, axis=0))

    # convert to pytorch
    fake = Variable(torch.from_numpy(fake)).type(dtypef)
    real = Variable(torch.from_numpy(real)).type(dtypef)

    # distance
    d = gaga.sliced_wasserstein(real, fake, l, p)
    print(d)
    

# --------------------------------------------------------------------------
if __name__ == '__main__':
    gaga_wasserstein()

