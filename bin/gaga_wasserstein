#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import gaga
import phsp
from torch.autograd import Variable
import torch
import numpy as np

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('phsp_filename')
@click.argument('pth_filename')
@click.option('--n', '-n', default=1e4, help='Number of samples to generate')
@click.option('--l', '-l', default=1e2, help='Number of projections')
@click.option('--p', '-p', default=1, help='Wasserstein distance power p=1 default')
@click.option('--keys', '-k', help='Plot the given keys (as a str list such that "X Y Z")', default='')
def gaga_wasserstein(phsp_filename, pth_filename, n, l, p, keys):
    '''
    \b
    Compute sliced Wasserstein between real and GAN generated distributions

    \b
    <PHSP_FILENAME>   : input phase space file PHSP file (.npy)
    <PTH_FILENAME>    : input GAN PTH file (.pth)
    '''

    n = int(n)
    # load phsp
    real, r_keys, m = phsp.load(phsp_filename, n)

    # load pth
    params, G, optim, dtypef = gaga.load(pth_filename)

    # convert array of key into str
    f_keys = params['keys']

    # keep only required dimension from real
    real = phsp.select_keys(real, r_keys, f_keys)

    # generate samples
    fake = gaga.generate_samples_torch(params, G, dtypef, n)

    # convert real to pytorch Tensor
    real = Variable(torch.from_numpy(real)).type(dtypef)

    x_mean = Variable(torch.from_numpy(params['x_mean'])).type(dtypef)
    x_std = Variable(torch.from_numpy(params['x_std'])).type(dtypef)
    fake = (fake-x_mean)/x_std
    real = (real-x_mean)/x_std

    # select the required keys
    keys = phsp.str_keys_to_array_keys(keys)
    if len(keys) > 0:
        real = phsp.select_keys(real, f_keys, keys)
        fake = phsp.select_keys(fake, f_keys, keys)

    # distance
    d = gaga.sliced_wasserstein(real, fake, l, p)
    print(d)
    

# --------------------------------------------------------------------------
if __name__ == '__main__':
    gaga_wasserstein()

